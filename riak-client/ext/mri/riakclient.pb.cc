// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "riakclient.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RpbErrorResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbErrorResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetClientIdResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetClientIdResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetClientIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetClientIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetServerInfoResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetServerInfoResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPutReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPutReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPutResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPutResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListBucketsResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListBucketsResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListKeysReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListKeysReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbListKeysResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbListKeysResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbGetBucketResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbGetBucketResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbSetBucketReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbSetBucketReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbMapRedReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbMapRedReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbMapRedResp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbMapRedResp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbLink_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbLink_reflection_ = NULL;
const ::google::protobuf::Descriptor* RpbBucketProps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RpbBucketProps_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_riakclient_2eproto() {
  protobuf_AddDesc_riakclient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "riakclient.proto");
  GOOGLE_CHECK(file != NULL);
  RpbErrorResp_descriptor_ = file->message_type(0);
  static const int RpbErrorResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, errcode_),
  };
  RpbErrorResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbErrorResp_descriptor_,
      RpbErrorResp::default_instance_,
      RpbErrorResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbErrorResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbErrorResp));
  RpbGetClientIdResp_descriptor_ = file->message_type(1);
  static const int RpbGetClientIdResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, client_id_),
  };
  RpbGetClientIdResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetClientIdResp_descriptor_,
      RpbGetClientIdResp::default_instance_,
      RpbGetClientIdResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetClientIdResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetClientIdResp));
  RpbSetClientIdReq_descriptor_ = file->message_type(2);
  static const int RpbSetClientIdReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, client_id_),
  };
  RpbSetClientIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetClientIdReq_descriptor_,
      RpbSetClientIdReq::default_instance_,
      RpbSetClientIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetClientIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetClientIdReq));
  RpbGetServerInfoResp_descriptor_ = file->message_type(3);
  static const int RpbGetServerInfoResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, server_version_),
  };
  RpbGetServerInfoResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetServerInfoResp_descriptor_,
      RpbGetServerInfoResp::default_instance_,
      RpbGetServerInfoResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetServerInfoResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetServerInfoResp));
  RpbGetReq_descriptor_ = file->message_type(4);
  static const int RpbGetReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, r_),
  };
  RpbGetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetReq_descriptor_,
      RpbGetReq::default_instance_,
      RpbGetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetReq));
  RpbGetResp_descriptor_ = file->message_type(5);
  static const int RpbGetResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, vclock_),
  };
  RpbGetResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetResp_descriptor_,
      RpbGetResp::default_instance_,
      RpbGetResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetResp));
  RpbPutReq_descriptor_ = file->message_type(6);
  static const int RpbPutReq_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, vclock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, w_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, dw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, return_body_),
  };
  RpbPutReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPutReq_descriptor_,
      RpbPutReq::default_instance_,
      RpbPutReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPutReq));
  RpbPutResp_descriptor_ = file->message_type(7);
  static const int RpbPutResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, vclock_),
  };
  RpbPutResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPutResp_descriptor_,
      RpbPutResp::default_instance_,
      RpbPutResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPutResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPutResp));
  RpbDelReq_descriptor_ = file->message_type(8);
  static const int RpbDelReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, rw_),
  };
  RpbDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbDelReq_descriptor_,
      RpbDelReq::default_instance_,
      RpbDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbDelReq));
  RpbListBucketsResp_descriptor_ = file->message_type(9);
  static const int RpbListBucketsResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, buckets_),
  };
  RpbListBucketsResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListBucketsResp_descriptor_,
      RpbListBucketsResp::default_instance_,
      RpbListBucketsResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListBucketsResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListBucketsResp));
  RpbListKeysReq_descriptor_ = file->message_type(10);
  static const int RpbListKeysReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, bucket_),
  };
  RpbListKeysReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListKeysReq_descriptor_,
      RpbListKeysReq::default_instance_,
      RpbListKeysReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListKeysReq));
  RpbListKeysResp_descriptor_ = file->message_type(11);
  static const int RpbListKeysResp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, keys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, done_),
  };
  RpbListKeysResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbListKeysResp_descriptor_,
      RpbListKeysResp::default_instance_,
      RpbListKeysResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbListKeysResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbListKeysResp));
  RpbGetBucketReq_descriptor_ = file->message_type(12);
  static const int RpbGetBucketReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, bucket_),
  };
  RpbGetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketReq_descriptor_,
      RpbGetBucketReq::default_instance_,
      RpbGetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketReq));
  RpbGetBucketResp_descriptor_ = file->message_type(13);
  static const int RpbGetBucketResp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, props_),
  };
  RpbGetBucketResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbGetBucketResp_descriptor_,
      RpbGetBucketResp::default_instance_,
      RpbGetBucketResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbGetBucketResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbGetBucketResp));
  RpbSetBucketReq_descriptor_ = file->message_type(14);
  static const int RpbSetBucketReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, props_),
  };
  RpbSetBucketReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbSetBucketReq_descriptor_,
      RpbSetBucketReq::default_instance_,
      RpbSetBucketReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbSetBucketReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbSetBucketReq));
  RpbMapRedReq_descriptor_ = file->message_type(15);
  static const int RpbMapRedReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, content_type_),
  };
  RpbMapRedReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbMapRedReq_descriptor_,
      RpbMapRedReq::default_instance_,
      RpbMapRedReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbMapRedReq));
  RpbMapRedResp_descriptor_ = file->message_type(16);
  static const int RpbMapRedResp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, phase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, done_),
  };
  RpbMapRedResp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbMapRedResp_descriptor_,
      RpbMapRedResp::default_instance_,
      RpbMapRedResp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbMapRedResp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbMapRedResp));
  RpbContent_descriptor_ = file->message_type(17);
  static const int RpbContent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, content_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, charset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, content_encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, vtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, last_mod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, last_mod_usecs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, usermeta_),
  };
  RpbContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbContent_descriptor_,
      RpbContent::default_instance_,
      RpbContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbContent));
  RpbPair_descriptor_ = file->message_type(18);
  static const int RpbPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, value_),
  };
  RpbPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbPair_descriptor_,
      RpbPair::default_instance_,
      RpbPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbPair));
  RpbLink_descriptor_ = file->message_type(19);
  static const int RpbLink_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, tag_),
  };
  RpbLink_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbLink_descriptor_,
      RpbLink::default_instance_,
      RpbLink_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbLink, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbLink));
  RpbBucketProps_descriptor_ = file->message_type(20);
  static const int RpbBucketProps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, n_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, allow_mult_),
  };
  RpbBucketProps_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RpbBucketProps_descriptor_,
      RpbBucketProps::default_instance_,
      RpbBucketProps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RpbBucketProps, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RpbBucketProps));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_riakclient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbErrorResp_descriptor_, &RpbErrorResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetClientIdResp_descriptor_, &RpbGetClientIdResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetClientIdReq_descriptor_, &RpbSetClientIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetServerInfoResp_descriptor_, &RpbGetServerInfoResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetReq_descriptor_, &RpbGetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetResp_descriptor_, &RpbGetResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPutReq_descriptor_, &RpbPutReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPutResp_descriptor_, &RpbPutResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbDelReq_descriptor_, &RpbDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListBucketsResp_descriptor_, &RpbListBucketsResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListKeysReq_descriptor_, &RpbListKeysReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbListKeysResp_descriptor_, &RpbListKeysResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketReq_descriptor_, &RpbGetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbGetBucketResp_descriptor_, &RpbGetBucketResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbSetBucketReq_descriptor_, &RpbSetBucketReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbMapRedReq_descriptor_, &RpbMapRedReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbMapRedResp_descriptor_, &RpbMapRedResp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbContent_descriptor_, &RpbContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbPair_descriptor_, &RpbPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbLink_descriptor_, &RpbLink::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RpbBucketProps_descriptor_, &RpbBucketProps::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_riakclient_2eproto() {
  delete RpbErrorResp::default_instance_;
  delete RpbErrorResp_reflection_;
  delete RpbGetClientIdResp::default_instance_;
  delete RpbGetClientIdResp_reflection_;
  delete RpbSetClientIdReq::default_instance_;
  delete RpbSetClientIdReq_reflection_;
  delete RpbGetServerInfoResp::default_instance_;
  delete RpbGetServerInfoResp_reflection_;
  delete RpbGetReq::default_instance_;
  delete RpbGetReq_reflection_;
  delete RpbGetResp::default_instance_;
  delete RpbGetResp_reflection_;
  delete RpbPutReq::default_instance_;
  delete RpbPutReq_reflection_;
  delete RpbPutResp::default_instance_;
  delete RpbPutResp_reflection_;
  delete RpbDelReq::default_instance_;
  delete RpbDelReq_reflection_;
  delete RpbListBucketsResp::default_instance_;
  delete RpbListBucketsResp_reflection_;
  delete RpbListKeysReq::default_instance_;
  delete RpbListKeysReq_reflection_;
  delete RpbListKeysResp::default_instance_;
  delete RpbListKeysResp_reflection_;
  delete RpbGetBucketReq::default_instance_;
  delete RpbGetBucketReq_reflection_;
  delete RpbGetBucketResp::default_instance_;
  delete RpbGetBucketResp_reflection_;
  delete RpbSetBucketReq::default_instance_;
  delete RpbSetBucketReq_reflection_;
  delete RpbMapRedReq::default_instance_;
  delete RpbMapRedReq_reflection_;
  delete RpbMapRedResp::default_instance_;
  delete RpbMapRedResp_reflection_;
  delete RpbContent::default_instance_;
  delete RpbContent_reflection_;
  delete RpbPair::default_instance_;
  delete RpbPair_reflection_;
  delete RpbLink::default_instance_;
  delete RpbLink_reflection_;
  delete RpbBucketProps::default_instance_;
  delete RpbBucketProps_reflection_;
}

void protobuf_AddDesc_riakclient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020riakclient.proto\"/\n\014RpbErrorResp\022\016\n\006er"
    "rmsg\030\001 \002(\014\022\017\n\007errcode\030\002 \002(\r\"\'\n\022RpbGetCli"
    "entIdResp\022\021\n\tclient_id\030\001 \002(\014\"&\n\021RpbSetCl"
    "ientIdReq\022\021\n\tclient_id\030\001 \002(\014\"<\n\024RpbGetSe"
    "rverInfoResp\022\014\n\004node\030\001 \001(\014\022\026\n\016server_ver"
    "sion\030\002 \001(\014\"3\n\tRpbGetReq\022\016\n\006bucket\030\001 \002(\014\022"
    "\013\n\003key\030\002 \002(\014\022\t\n\001r\030\003 \001(\r\":\n\nRpbGetResp\022\034\n"
    "\007content\030\001 \003(\0132\013.RpbContent\022\016\n\006vclock\030\002 "
    "\001(\014\"\202\001\n\tRpbPutReq\022\016\n\006bucket\030\001 \002(\014\022\013\n\003key"
    "\030\002 \002(\014\022\016\n\006vclock\030\003 \001(\014\022\034\n\007content\030\004 \002(\0132"
    "\013.RpbContent\022\t\n\001w\030\005 \001(\r\022\n\n\002dw\030\006 \001(\r\022\023\n\013r"
    "eturn_body\030\007 \001(\010\":\n\nRpbPutResp\022\034\n\007conten"
    "t\030\001 \003(\0132\013.RpbContent\022\016\n\006vclock\030\002 \001(\014\"4\n\t"
    "RpbDelReq\022\016\n\006bucket\030\001 \002(\014\022\013\n\003key\030\002 \002(\014\022\n"
    "\n\002rw\030\003 \001(\r\"%\n\022RpbListBucketsResp\022\017\n\007buck"
    "ets\030\001 \003(\014\" \n\016RpbListKeysReq\022\016\n\006bucket\030\001 "
    "\002(\014\"-\n\017RpbListKeysResp\022\014\n\004keys\030\001 \003(\014\022\014\n\004"
    "done\030\002 \001(\010\"!\n\017RpbGetBucketReq\022\016\n\006bucket\030"
    "\001 \002(\014\"2\n\020RpbGetBucketResp\022\036\n\005props\030\001 \002(\013"
    "2\017.RpbBucketProps\"A\n\017RpbSetBucketReq\022\016\n\006"
    "bucket\030\001 \002(\014\022\036\n\005props\030\002 \002(\0132\017.RpbBucketP"
    "rops\"5\n\014RpbMapRedReq\022\017\n\007request\030\001 \002(\014\022\024\n"
    "\014content_type\030\002 \002(\014\">\n\rRpbMapRedResp\022\r\n\005"
    "phase\030\001 \001(\r\022\020\n\010response\030\002 \001(\014\022\014\n\004done\030\003 "
    "\001(\010\"\311\001\n\nRpbContent\022\r\n\005value\030\001 \002(\014\022\024\n\014con"
    "tent_type\030\002 \001(\014\022\017\n\007charset\030\003 \001(\014\022\030\n\020cont"
    "ent_encoding\030\004 \001(\014\022\014\n\004vtag\030\005 \001(\014\022\027\n\005link"
    "s\030\006 \003(\0132\010.RpbLink\022\020\n\010last_mod\030\007 \001(\r\022\026\n\016l"
    "ast_mod_usecs\030\010 \001(\r\022\032\n\010usermeta\030\t \003(\0132\010."
    "RpbPair\"%\n\007RpbPair\022\013\n\003key\030\001 \002(\014\022\r\n\005value"
    "\030\002 \001(\014\"3\n\007RpbLink\022\016\n\006bucket\030\001 \001(\014\022\013\n\003key"
    "\030\002 \001(\014\022\013\n\003tag\030\003 \001(\014\"3\n\016RpbBucketProps\022\r\n"
    "\005n_val\030\001 \001(\r\022\022\n\nallow_mult\030\002 \001(\010", 1312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "riakclient.proto", &protobuf_RegisterTypes);
  RpbErrorResp::default_instance_ = new RpbErrorResp();
  RpbGetClientIdResp::default_instance_ = new RpbGetClientIdResp();
  RpbSetClientIdReq::default_instance_ = new RpbSetClientIdReq();
  RpbGetServerInfoResp::default_instance_ = new RpbGetServerInfoResp();
  RpbGetReq::default_instance_ = new RpbGetReq();
  RpbGetResp::default_instance_ = new RpbGetResp();
  RpbPutReq::default_instance_ = new RpbPutReq();
  RpbPutResp::default_instance_ = new RpbPutResp();
  RpbDelReq::default_instance_ = new RpbDelReq();
  RpbListBucketsResp::default_instance_ = new RpbListBucketsResp();
  RpbListKeysReq::default_instance_ = new RpbListKeysReq();
  RpbListKeysResp::default_instance_ = new RpbListKeysResp();
  RpbGetBucketReq::default_instance_ = new RpbGetBucketReq();
  RpbGetBucketResp::default_instance_ = new RpbGetBucketResp();
  RpbSetBucketReq::default_instance_ = new RpbSetBucketReq();
  RpbMapRedReq::default_instance_ = new RpbMapRedReq();
  RpbMapRedResp::default_instance_ = new RpbMapRedResp();
  RpbContent::default_instance_ = new RpbContent();
  RpbPair::default_instance_ = new RpbPair();
  RpbLink::default_instance_ = new RpbLink();
  RpbBucketProps::default_instance_ = new RpbBucketProps();
  RpbErrorResp::default_instance_->InitAsDefaultInstance();
  RpbGetClientIdResp::default_instance_->InitAsDefaultInstance();
  RpbSetClientIdReq::default_instance_->InitAsDefaultInstance();
  RpbGetServerInfoResp::default_instance_->InitAsDefaultInstance();
  RpbGetReq::default_instance_->InitAsDefaultInstance();
  RpbGetResp::default_instance_->InitAsDefaultInstance();
  RpbPutReq::default_instance_->InitAsDefaultInstance();
  RpbPutResp::default_instance_->InitAsDefaultInstance();
  RpbDelReq::default_instance_->InitAsDefaultInstance();
  RpbListBucketsResp::default_instance_->InitAsDefaultInstance();
  RpbListKeysReq::default_instance_->InitAsDefaultInstance();
  RpbListKeysResp::default_instance_->InitAsDefaultInstance();
  RpbGetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbGetBucketResp::default_instance_->InitAsDefaultInstance();
  RpbSetBucketReq::default_instance_->InitAsDefaultInstance();
  RpbMapRedReq::default_instance_->InitAsDefaultInstance();
  RpbMapRedResp::default_instance_->InitAsDefaultInstance();
  RpbContent::default_instance_->InitAsDefaultInstance();
  RpbPair::default_instance_->InitAsDefaultInstance();
  RpbLink::default_instance_->InitAsDefaultInstance();
  RpbBucketProps::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_riakclient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_riakclient_2eproto {
  StaticDescriptorInitializer_riakclient_2eproto() {
    protobuf_AddDesc_riakclient_2eproto();
  }
} static_descriptor_initializer_riakclient_2eproto_;


// ===================================================================

const ::std::string RpbErrorResp::_default_errmsg_;
#ifndef _MSC_VER
const int RpbErrorResp::kErrmsgFieldNumber;
const int RpbErrorResp::kErrcodeFieldNumber;
#endif  // !_MSC_VER

RpbErrorResp::RpbErrorResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbErrorResp::InitAsDefaultInstance() {
}

RpbErrorResp::RpbErrorResp(const RpbErrorResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbErrorResp::SharedCtor() {
  _cached_size_ = 0;
  errmsg_ = const_cast< ::std::string*>(&_default_errmsg_);
  errcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbErrorResp::~RpbErrorResp() {
  SharedDtor();
}

void RpbErrorResp::SharedDtor() {
  if (errmsg_ != &_default_errmsg_) {
    delete errmsg_;
  }
  if (this != default_instance_) {
  }
}

void RpbErrorResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbErrorResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbErrorResp_descriptor_;
}

const RpbErrorResp& RpbErrorResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbErrorResp* RpbErrorResp::default_instance_ = NULL;

RpbErrorResp* RpbErrorResp::New() const {
  return new RpbErrorResp;
}

void RpbErrorResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (errmsg_ != &_default_errmsg_) {
        errmsg_->clear();
      }
    }
    errcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbErrorResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes errmsg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_errmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_errcode;
        break;
      }
      
      // required uint32 errcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errcode_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbErrorResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes errmsg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->errmsg(), output);
  }
  
  // required uint32 errcode = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errcode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbErrorResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes errmsg = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->errmsg(), target);
  }
  
  // required uint32 errcode = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->errcode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbErrorResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes errmsg = 1;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->errmsg());
    }
    
    // required uint32 errcode = 2;
    if (has_errcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errcode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbErrorResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbErrorResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbErrorResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbErrorResp::MergeFrom(const RpbErrorResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_errmsg(from.errmsg());
    }
    if (from._has_bit(1)) {
      set_errcode(from.errcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbErrorResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbErrorResp::CopyFrom(const RpbErrorResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbErrorResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpbErrorResp::Swap(RpbErrorResp* other) {
  if (other != this) {
    std::swap(errmsg_, other->errmsg_);
    std::swap(errcode_, other->errcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbErrorResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbErrorResp_descriptor_;
  metadata.reflection = RpbErrorResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbGetClientIdResp::_default_client_id_;
#ifndef _MSC_VER
const int RpbGetClientIdResp::kClientIdFieldNumber;
#endif  // !_MSC_VER

RpbGetClientIdResp::RpbGetClientIdResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetClientIdResp::InitAsDefaultInstance() {
}

RpbGetClientIdResp::RpbGetClientIdResp(const RpbGetClientIdResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetClientIdResp::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&_default_client_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetClientIdResp::~RpbGetClientIdResp() {
  SharedDtor();
}

void RpbGetClientIdResp::SharedDtor() {
  if (client_id_ != &_default_client_id_) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetClientIdResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetClientIdResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetClientIdResp_descriptor_;
}

const RpbGetClientIdResp& RpbGetClientIdResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbGetClientIdResp* RpbGetClientIdResp::default_instance_ = NULL;

RpbGetClientIdResp* RpbGetClientIdResp::New() const {
  return new RpbGetClientIdResp;
}

void RpbGetClientIdResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (client_id_ != &_default_client_id_) {
        client_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetClientIdResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetClientIdResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes client_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->client_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetClientIdResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes client_id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetClientIdResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetClientIdResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetClientIdResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetClientIdResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetClientIdResp::MergeFrom(const RpbGetClientIdResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetClientIdResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetClientIdResp::CopyFrom(const RpbGetClientIdResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetClientIdResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbGetClientIdResp::Swap(RpbGetClientIdResp* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetClientIdResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetClientIdResp_descriptor_;
  metadata.reflection = RpbGetClientIdResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbSetClientIdReq::_default_client_id_;
#ifndef _MSC_VER
const int RpbSetClientIdReq::kClientIdFieldNumber;
#endif  // !_MSC_VER

RpbSetClientIdReq::RpbSetClientIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbSetClientIdReq::InitAsDefaultInstance() {
}

RpbSetClientIdReq::RpbSetClientIdReq(const RpbSetClientIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbSetClientIdReq::SharedCtor() {
  _cached_size_ = 0;
  client_id_ = const_cast< ::std::string*>(&_default_client_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetClientIdReq::~RpbSetClientIdReq() {
  SharedDtor();
}

void RpbSetClientIdReq::SharedDtor() {
  if (client_id_ != &_default_client_id_) {
    delete client_id_;
  }
  if (this != default_instance_) {
  }
}

void RpbSetClientIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetClientIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetClientIdReq_descriptor_;
}

const RpbSetClientIdReq& RpbSetClientIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbSetClientIdReq* RpbSetClientIdReq::default_instance_ = NULL;

RpbSetClientIdReq* RpbSetClientIdReq::New() const {
  return new RpbSetClientIdReq;
}

void RpbSetClientIdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (client_id_ != &_default_client_id_) {
        client_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetClientIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes client_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbSetClientIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes client_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->client_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbSetClientIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes client_id = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->client_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbSetClientIdReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes client_id = 1;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->client_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetClientIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetClientIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetClientIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetClientIdReq::MergeFrom(const RpbSetClientIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_client_id(from.client_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetClientIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetClientIdReq::CopyFrom(const RpbSetClientIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetClientIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbSetClientIdReq::Swap(RpbSetClientIdReq* other) {
  if (other != this) {
    std::swap(client_id_, other->client_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetClientIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetClientIdReq_descriptor_;
  metadata.reflection = RpbSetClientIdReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbGetServerInfoResp::_default_node_;
const ::std::string RpbGetServerInfoResp::_default_server_version_;
#ifndef _MSC_VER
const int RpbGetServerInfoResp::kNodeFieldNumber;
const int RpbGetServerInfoResp::kServerVersionFieldNumber;
#endif  // !_MSC_VER

RpbGetServerInfoResp::RpbGetServerInfoResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetServerInfoResp::InitAsDefaultInstance() {
}

RpbGetServerInfoResp::RpbGetServerInfoResp(const RpbGetServerInfoResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetServerInfoResp::SharedCtor() {
  _cached_size_ = 0;
  node_ = const_cast< ::std::string*>(&_default_node_);
  server_version_ = const_cast< ::std::string*>(&_default_server_version_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetServerInfoResp::~RpbGetServerInfoResp() {
  SharedDtor();
}

void RpbGetServerInfoResp::SharedDtor() {
  if (node_ != &_default_node_) {
    delete node_;
  }
  if (server_version_ != &_default_server_version_) {
    delete server_version_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetServerInfoResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetServerInfoResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetServerInfoResp_descriptor_;
}

const RpbGetServerInfoResp& RpbGetServerInfoResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbGetServerInfoResp* RpbGetServerInfoResp::default_instance_ = NULL;

RpbGetServerInfoResp* RpbGetServerInfoResp::New() const {
  return new RpbGetServerInfoResp;
}

void RpbGetServerInfoResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (node_ != &_default_node_) {
        node_->clear();
      }
    }
    if (_has_bit(1)) {
      if (server_version_ != &_default_server_version_) {
        server_version_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetServerInfoResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server_version;
        break;
      }
      
      // optional bytes server_version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_server_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetServerInfoResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes node = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->node(), output);
  }
  
  // optional bytes server_version = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->server_version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetServerInfoResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes node = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->node(), target);
  }
  
  // optional bytes server_version = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->server_version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetServerInfoResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->node());
    }
    
    // optional bytes server_version = 2;
    if (has_server_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->server_version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetServerInfoResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetServerInfoResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetServerInfoResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetServerInfoResp::MergeFrom(const RpbGetServerInfoResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_node(from.node());
    }
    if (from._has_bit(1)) {
      set_server_version(from.server_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetServerInfoResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetServerInfoResp::CopyFrom(const RpbGetServerInfoResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetServerInfoResp::IsInitialized() const {
  
  return true;
}

void RpbGetServerInfoResp::Swap(RpbGetServerInfoResp* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(server_version_, other->server_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetServerInfoResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetServerInfoResp_descriptor_;
  metadata.reflection = RpbGetServerInfoResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbGetReq::_default_bucket_;
const ::std::string RpbGetReq::_default_key_;
#ifndef _MSC_VER
const int RpbGetReq::kBucketFieldNumber;
const int RpbGetReq::kKeyFieldNumber;
const int RpbGetReq::kRFieldNumber;
#endif  // !_MSC_VER

RpbGetReq::RpbGetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetReq::InitAsDefaultInstance() {
}

RpbGetReq::RpbGetReq(const RpbGetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetReq::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  key_ = const_cast< ::std::string*>(&_default_key_);
  r_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetReq::~RpbGetReq() {
  SharedDtor();
}

void RpbGetReq::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetReq_descriptor_;
}

const RpbGetReq& RpbGetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbGetReq* RpbGetReq::default_instance_ = NULL;

RpbGetReq* RpbGetReq::New() const {
  return new RpbGetReq;
}

void RpbGetReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
    if (_has_bit(1)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    r_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_r;
        break;
      }
      
      // optional uint32 r = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  // required bytes key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // optional uint32 r = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  // required bytes key = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // optional uint32 r = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->r(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional uint32 r = 3;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetReq::MergeFrom(const RpbGetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_r(from.r());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetReq::CopyFrom(const RpbGetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpbGetReq::Swap(RpbGetReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(r_, other->r_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetReq_descriptor_;
  metadata.reflection = RpbGetReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbGetResp::_default_vclock_;
#ifndef _MSC_VER
const int RpbGetResp::kContentFieldNumber;
const int RpbGetResp::kVclockFieldNumber;
#endif  // !_MSC_VER

RpbGetResp::RpbGetResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetResp::InitAsDefaultInstance() {
}

RpbGetResp::RpbGetResp(const RpbGetResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetResp::SharedCtor() {
  _cached_size_ = 0;
  vclock_ = const_cast< ::std::string*>(&_default_vclock_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetResp::~RpbGetResp() {
  SharedDtor();
}

void RpbGetResp::SharedDtor() {
  if (vclock_ != &_default_vclock_) {
    delete vclock_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetResp_descriptor_;
}

const RpbGetResp& RpbGetResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbGetResp* RpbGetResp::default_instance_ = NULL;

RpbGetResp* RpbGetResp::New() const {
  return new RpbGetResp;
}

void RpbGetResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (vclock_ != &_default_vclock_) {
        vclock_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbContent content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectTag(18)) goto parse_vclock;
        break;
      }
      
      // optional bytes vclock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  // optional bytes vclock = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->vclock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  // optional bytes vclock = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vclock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes vclock = 2;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }
    
  }
  // repeated .RpbContent content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetResp::MergeFrom(const RpbGetResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_vclock(from.vclock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetResp::CopyFrom(const RpbGetResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetResp::IsInitialized() const {
  
  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void RpbGetResp::Swap(RpbGetResp* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(vclock_, other->vclock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetResp_descriptor_;
  metadata.reflection = RpbGetResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbPutReq::_default_bucket_;
const ::std::string RpbPutReq::_default_key_;
const ::std::string RpbPutReq::_default_vclock_;
#ifndef _MSC_VER
const int RpbPutReq::kBucketFieldNumber;
const int RpbPutReq::kKeyFieldNumber;
const int RpbPutReq::kVclockFieldNumber;
const int RpbPutReq::kContentFieldNumber;
const int RpbPutReq::kWFieldNumber;
const int RpbPutReq::kDwFieldNumber;
const int RpbPutReq::kReturnBodyFieldNumber;
#endif  // !_MSC_VER

RpbPutReq::RpbPutReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbPutReq::InitAsDefaultInstance() {
  content_ = const_cast< ::RpbContent*>(&::RpbContent::default_instance());
}

RpbPutReq::RpbPutReq(const RpbPutReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbPutReq::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  key_ = const_cast< ::std::string*>(&_default_key_);
  vclock_ = const_cast< ::std::string*>(&_default_vclock_);
  content_ = NULL;
  w_ = 0u;
  dw_ = 0u;
  return_body_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPutReq::~RpbPutReq() {
  SharedDtor();
}

void RpbPutReq::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (vclock_ != &_default_vclock_) {
    delete vclock_;
  }
  if (this != default_instance_) {
    delete content_;
  }
}

void RpbPutReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPutReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPutReq_descriptor_;
}

const RpbPutReq& RpbPutReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbPutReq* RpbPutReq::default_instance_ = NULL;

RpbPutReq* RpbPutReq::New() const {
  return new RpbPutReq;
}

void RpbPutReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
    if (_has_bit(1)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (vclock_ != &_default_vclock_) {
        vclock_->clear();
      }
    }
    if (_has_bit(3)) {
      if (content_ != NULL) content_->::RpbContent::Clear();
    }
    w_ = 0u;
    dw_ = 0u;
    return_body_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPutReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vclock;
        break;
      }
      
      // optional bytes vclock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }
      
      // required .RpbContent content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_w;
        break;
      }
      
      // optional uint32 w = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &w_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dw;
        break;
      }
      
      // optional uint32 dw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dw_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_return_body;
        break;
      }
      
      // optional bool return_body = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_body_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbPutReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  // required bytes key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // optional bytes vclock = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->vclock(), output);
  }
  
  // required .RpbContent content = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->content(), output);
  }
  
  // optional uint32 w = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->w(), output);
  }
  
  // optional uint32 dw = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dw(), output);
  }
  
  // optional bool return_body = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->return_body(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbPutReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  // required bytes key = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // optional bytes vclock = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->vclock(), target);
  }
  
  // required .RpbContent content = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->content(), target);
  }
  
  // optional uint32 w = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->w(), target);
  }
  
  // optional uint32 dw = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dw(), target);
  }
  
  // optional bool return_body = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->return_body(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbPutReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional bytes vclock = 3;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }
    
    // required .RpbContent content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }
    
    // optional uint32 w = 5;
    if (has_w()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->w());
    }
    
    // optional uint32 dw = 6;
    if (has_dw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dw());
    }
    
    // optional bool return_body = 7;
    if (has_return_body()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPutReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPutReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPutReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPutReq::MergeFrom(const RpbPutReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_vclock(from.vclock());
    }
    if (from._has_bit(3)) {
      mutable_content()->::RpbContent::MergeFrom(from.content());
    }
    if (from._has_bit(4)) {
      set_w(from.w());
    }
    if (from._has_bit(5)) {
      set_dw(from.dw());
    }
    if (from._has_bit(6)) {
      set_return_body(from.return_body());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPutReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPutReq::CopyFrom(const RpbPutReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPutReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  if (has_content()) {
    if (!this->content().IsInitialized()) return false;
  }
  return true;
}

void RpbPutReq::Swap(RpbPutReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(vclock_, other->vclock_);
    std::swap(content_, other->content_);
    std::swap(w_, other->w_);
    std::swap(dw_, other->dw_);
    std::swap(return_body_, other->return_body_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPutReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPutReq_descriptor_;
  metadata.reflection = RpbPutReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbPutResp::_default_vclock_;
#ifndef _MSC_VER
const int RpbPutResp::kContentFieldNumber;
const int RpbPutResp::kVclockFieldNumber;
#endif  // !_MSC_VER

RpbPutResp::RpbPutResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbPutResp::InitAsDefaultInstance() {
}

RpbPutResp::RpbPutResp(const RpbPutResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbPutResp::SharedCtor() {
  _cached_size_ = 0;
  vclock_ = const_cast< ::std::string*>(&_default_vclock_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPutResp::~RpbPutResp() {
  SharedDtor();
}

void RpbPutResp::SharedDtor() {
  if (vclock_ != &_default_vclock_) {
    delete vclock_;
  }
  if (this != default_instance_) {
  }
}

void RpbPutResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPutResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPutResp_descriptor_;
}

const RpbPutResp& RpbPutResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbPutResp* RpbPutResp::default_instance_ = NULL;

RpbPutResp* RpbPutResp::New() const {
  return new RpbPutResp;
}

void RpbPutResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (vclock_ != &_default_vclock_) {
        vclock_->clear();
      }
    }
  }
  content_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPutResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RpbContent content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_content;
        if (input->ExpectTag(18)) goto parse_vclock;
        break;
      }
      
      // optional bytes vclock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vclock:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vclock()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbPutResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->content(i), output);
  }
  
  // optional bytes vclock = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->vclock(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbPutResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RpbContent content = 1;
  for (int i = 0; i < this->content_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->content(i), target);
  }
  
  // optional bytes vclock = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->vclock(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbPutResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes vclock = 2;
    if (has_vclock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vclock());
    }
    
  }
  // repeated .RpbContent content = 1;
  total_size += 1 * this->content_size();
  for (int i = 0; i < this->content_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->content(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPutResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPutResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPutResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPutResp::MergeFrom(const RpbPutResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  content_.MergeFrom(from.content_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_vclock(from.vclock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPutResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPutResp::CopyFrom(const RpbPutResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPutResp::IsInitialized() const {
  
  for (int i = 0; i < content_size(); i++) {
    if (!this->content(i).IsInitialized()) return false;
  }
  return true;
}

void RpbPutResp::Swap(RpbPutResp* other) {
  if (other != this) {
    content_.Swap(&other->content_);
    std::swap(vclock_, other->vclock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPutResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPutResp_descriptor_;
  metadata.reflection = RpbPutResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbDelReq::_default_bucket_;
const ::std::string RpbDelReq::_default_key_;
#ifndef _MSC_VER
const int RpbDelReq::kBucketFieldNumber;
const int RpbDelReq::kKeyFieldNumber;
const int RpbDelReq::kRwFieldNumber;
#endif  // !_MSC_VER

RpbDelReq::RpbDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbDelReq::InitAsDefaultInstance() {
}

RpbDelReq::RpbDelReq(const RpbDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbDelReq::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  key_ = const_cast< ::std::string*>(&_default_key_);
  rw_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbDelReq::~RpbDelReq() {
  SharedDtor();
}

void RpbDelReq::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void RpbDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbDelReq_descriptor_;
}

const RpbDelReq& RpbDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbDelReq* RpbDelReq::default_instance_ = NULL;

RpbDelReq* RpbDelReq::New() const {
  return new RpbDelReq;
}

void RpbDelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
    if (_has_bit(1)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    rw_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // required bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rw;
        break;
      }
      
      // optional uint32 rw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rw_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  // required bytes key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // optional uint32 rw = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  // required bytes key = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // optional uint32 rw = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbDelReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
    // required bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional uint32 rw = 3;
    if (has_rw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbDelReq::MergeFrom(const RpbDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_rw(from.rw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbDelReq::CopyFrom(const RpbDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbDelReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpbDelReq::Swap(RpbDelReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(rw_, other->rw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbDelReq_descriptor_;
  metadata.reflection = RpbDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListBucketsResp::kBucketsFieldNumber;
#endif  // !_MSC_VER

RpbListBucketsResp::RpbListBucketsResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbListBucketsResp::InitAsDefaultInstance() {
}

RpbListBucketsResp::RpbListBucketsResp(const RpbListBucketsResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbListBucketsResp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListBucketsResp::~RpbListBucketsResp() {
  SharedDtor();
}

void RpbListBucketsResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbListBucketsResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListBucketsResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListBucketsResp_descriptor_;
}

const RpbListBucketsResp& RpbListBucketsResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbListBucketsResp* RpbListBucketsResp::default_instance_ = NULL;

RpbListBucketsResp* RpbListBucketsResp::New() const {
  return new RpbListBucketsResp;
}

void RpbListBucketsResp::Clear() {
  buckets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListBucketsResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes buckets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buckets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_buckets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buckets;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbListBucketsResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->buckets(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbListBucketsResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes buckets = 1;
  for (int i = 0; i < this->buckets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->buckets(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbListBucketsResp::ByteSize() const {
  int total_size = 0;
  
  // repeated bytes buckets = 1;
  total_size += 1 * this->buckets_size();
  for (int i = 0; i < this->buckets_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->buckets(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListBucketsResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListBucketsResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListBucketsResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListBucketsResp::MergeFrom(const RpbListBucketsResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  buckets_.MergeFrom(from.buckets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListBucketsResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListBucketsResp::CopyFrom(const RpbListBucketsResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListBucketsResp::IsInitialized() const {
  
  return true;
}

void RpbListBucketsResp::Swap(RpbListBucketsResp* other) {
  if (other != this) {
    buckets_.Swap(&other->buckets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListBucketsResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListBucketsResp_descriptor_;
  metadata.reflection = RpbListBucketsResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbListKeysReq::_default_bucket_;
#ifndef _MSC_VER
const int RpbListKeysReq::kBucketFieldNumber;
#endif  // !_MSC_VER

RpbListKeysReq::RpbListKeysReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbListKeysReq::InitAsDefaultInstance() {
}

RpbListKeysReq::RpbListKeysReq(const RpbListKeysReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbListKeysReq::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListKeysReq::~RpbListKeysReq() {
  SharedDtor();
}

void RpbListKeysReq::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (this != default_instance_) {
  }
}

void RpbListKeysReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListKeysReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListKeysReq_descriptor_;
}

const RpbListKeysReq& RpbListKeysReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbListKeysReq* RpbListKeysReq::default_instance_ = NULL;

RpbListKeysReq* RpbListKeysReq::New() const {
  return new RpbListKeysReq;
}

void RpbListKeysReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListKeysReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbListKeysReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbListKeysReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbListKeysReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListKeysReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListKeysReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListKeysReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListKeysReq::MergeFrom(const RpbListKeysReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListKeysReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListKeysReq::CopyFrom(const RpbListKeysReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListKeysReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbListKeysReq::Swap(RpbListKeysReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListKeysReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListKeysReq_descriptor_;
  metadata.reflection = RpbListKeysReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbListKeysResp::kKeysFieldNumber;
const int RpbListKeysResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbListKeysResp::RpbListKeysResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbListKeysResp::InitAsDefaultInstance() {
}

RpbListKeysResp::RpbListKeysResp(const RpbListKeysResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbListKeysResp::SharedCtor() {
  _cached_size_ = 0;
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbListKeysResp::~RpbListKeysResp() {
  SharedDtor();
}

void RpbListKeysResp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbListKeysResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbListKeysResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbListKeysResp_descriptor_;
}

const RpbListKeysResp& RpbListKeysResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbListKeysResp* RpbListKeysResp::default_instance_ = NULL;

RpbListKeysResp* RpbListKeysResp::New() const {
  return new RpbListKeysResp;
}

void RpbListKeysResp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    done_ = false;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbListKeysResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bytes keys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keys;
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }
      
      // optional bool done = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbListKeysResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->keys(i), output);
  }
  
  // optional bool done = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbListKeysResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bytes keys = 1;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(1, this->keys(i), target);
  }
  
  // optional bool done = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbListKeysResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool done = 2;
    if (has_done()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated bytes keys = 1;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->keys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbListKeysResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbListKeysResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbListKeysResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbListKeysResp::MergeFrom(const RpbListKeysResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbListKeysResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbListKeysResp::CopyFrom(const RpbListKeysResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbListKeysResp::IsInitialized() const {
  
  return true;
}

void RpbListKeysResp::Swap(RpbListKeysResp* other) {
  if (other != this) {
    keys_.Swap(&other->keys_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbListKeysResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbListKeysResp_descriptor_;
  metadata.reflection = RpbListKeysResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbGetBucketReq::_default_bucket_;
#ifndef _MSC_VER
const int RpbGetBucketReq::kBucketFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketReq::RpbGetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetBucketReq::InitAsDefaultInstance() {
}

RpbGetBucketReq::RpbGetBucketReq(const RpbGetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetBucketReq::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketReq::~RpbGetBucketReq() {
  SharedDtor();
}

void RpbGetBucketReq::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (this != default_instance_) {
  }
}

void RpbGetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketReq_descriptor_;
}

const RpbGetBucketReq& RpbGetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbGetBucketReq* RpbGetBucketReq::default_instance_ = NULL;

RpbGetBucketReq* RpbGetBucketReq::New() const {
  return new RpbGetBucketReq;
}

void RpbGetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetBucketReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketReq::MergeFrom(const RpbGetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketReq::CopyFrom(const RpbGetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbGetBucketReq::Swap(RpbGetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketReq_descriptor_;
  metadata.reflection = RpbGetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbGetBucketResp::kPropsFieldNumber;
#endif  // !_MSC_VER

RpbGetBucketResp::RpbGetBucketResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbGetBucketResp::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbGetBucketResp::RpbGetBucketResp(const RpbGetBucketResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbGetBucketResp::SharedCtor() {
  _cached_size_ = 0;
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbGetBucketResp::~RpbGetBucketResp() {
  SharedDtor();
}

void RpbGetBucketResp::SharedDtor() {
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbGetBucketResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbGetBucketResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbGetBucketResp_descriptor_;
}

const RpbGetBucketResp& RpbGetBucketResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbGetBucketResp* RpbGetBucketResp::default_instance_ = NULL;

RpbGetBucketResp* RpbGetBucketResp::New() const {
  return new RpbGetBucketResp;
}

void RpbGetBucketResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (props_ != NULL) props_->::RpbBucketProps::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbGetBucketResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RpbBucketProps props = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbGetBucketResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RpbBucketProps props = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->props(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbGetBucketResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RpbBucketProps props = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->props(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbGetBucketResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RpbBucketProps props = 1;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbGetBucketResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbGetBucketResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbGetBucketResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbGetBucketResp::MergeFrom(const RpbGetBucketResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbGetBucketResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbGetBucketResp::CopyFrom(const RpbGetBucketResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbGetBucketResp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbGetBucketResp::Swap(RpbGetBucketResp* other) {
  if (other != this) {
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbGetBucketResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbGetBucketResp_descriptor_;
  metadata.reflection = RpbGetBucketResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbSetBucketReq::_default_bucket_;
#ifndef _MSC_VER
const int RpbSetBucketReq::kBucketFieldNumber;
const int RpbSetBucketReq::kPropsFieldNumber;
#endif  // !_MSC_VER

RpbSetBucketReq::RpbSetBucketReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbSetBucketReq::InitAsDefaultInstance() {
  props_ = const_cast< ::RpbBucketProps*>(&::RpbBucketProps::default_instance());
}

RpbSetBucketReq::RpbSetBucketReq(const RpbSetBucketReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbSetBucketReq::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  props_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbSetBucketReq::~RpbSetBucketReq() {
  SharedDtor();
}

void RpbSetBucketReq::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (this != default_instance_) {
    delete props_;
  }
}

void RpbSetBucketReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbSetBucketReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbSetBucketReq_descriptor_;
}

const RpbSetBucketReq& RpbSetBucketReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbSetBucketReq* RpbSetBucketReq::default_instance_ = NULL;

RpbSetBucketReq* RpbSetBucketReq::New() const {
  return new RpbSetBucketReq;
}

void RpbSetBucketReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
    if (_has_bit(1)) {
      if (props_ != NULL) props_->::RpbBucketProps::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbSetBucketReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_props;
        break;
      }
      
      // required .RpbBucketProps props = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_props:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_props()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbSetBucketReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  // required .RpbBucketProps props = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->props(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbSetBucketReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  // required .RpbBucketProps props = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->props(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbSetBucketReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
    // required .RpbBucketProps props = 2;
    if (has_props()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->props());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbSetBucketReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbSetBucketReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbSetBucketReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbSetBucketReq::MergeFrom(const RpbSetBucketReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
    if (from._has_bit(1)) {
      mutable_props()->::RpbBucketProps::MergeFrom(from.props());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbSetBucketReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbSetBucketReq::CopyFrom(const RpbSetBucketReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbSetBucketReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpbSetBucketReq::Swap(RpbSetBucketReq* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(props_, other->props_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbSetBucketReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbSetBucketReq_descriptor_;
  metadata.reflection = RpbSetBucketReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbMapRedReq::_default_request_;
const ::std::string RpbMapRedReq::_default_content_type_;
#ifndef _MSC_VER
const int RpbMapRedReq::kRequestFieldNumber;
const int RpbMapRedReq::kContentTypeFieldNumber;
#endif  // !_MSC_VER

RpbMapRedReq::RpbMapRedReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbMapRedReq::InitAsDefaultInstance() {
}

RpbMapRedReq::RpbMapRedReq(const RpbMapRedReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbMapRedReq::SharedCtor() {
  _cached_size_ = 0;
  request_ = const_cast< ::std::string*>(&_default_request_);
  content_type_ = const_cast< ::std::string*>(&_default_content_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbMapRedReq::~RpbMapRedReq() {
  SharedDtor();
}

void RpbMapRedReq::SharedDtor() {
  if (request_ != &_default_request_) {
    delete request_;
  }
  if (content_type_ != &_default_content_type_) {
    delete content_type_;
  }
  if (this != default_instance_) {
  }
}

void RpbMapRedReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbMapRedReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbMapRedReq_descriptor_;
}

const RpbMapRedReq& RpbMapRedReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbMapRedReq* RpbMapRedReq::default_instance_ = NULL;

RpbMapRedReq* RpbMapRedReq::New() const {
  return new RpbMapRedReq;
}

void RpbMapRedReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (request_ != &_default_request_) {
        request_->clear();
      }
    }
    if (_has_bit(1)) {
      if (content_type_ != &_default_content_type_) {
        content_type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbMapRedReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }
      
      // required bytes content_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbMapRedReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes request = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->request(), output);
  }
  
  // required bytes content_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content_type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbMapRedReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes request = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->request(), target);
  }
  
  // required bytes content_type = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbMapRedReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes request = 1;
    if (has_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->request());
    }
    
    // required bytes content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbMapRedReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbMapRedReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbMapRedReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbMapRedReq::MergeFrom(const RpbMapRedReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_request(from.request());
    }
    if (from._has_bit(1)) {
      set_content_type(from.content_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbMapRedReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbMapRedReq::CopyFrom(const RpbMapRedReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbMapRedReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RpbMapRedReq::Swap(RpbMapRedReq* other) {
  if (other != this) {
    std::swap(request_, other->request_);
    std::swap(content_type_, other->content_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbMapRedReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbMapRedReq_descriptor_;
  metadata.reflection = RpbMapRedReq_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbMapRedResp::_default_response_;
#ifndef _MSC_VER
const int RpbMapRedResp::kPhaseFieldNumber;
const int RpbMapRedResp::kResponseFieldNumber;
const int RpbMapRedResp::kDoneFieldNumber;
#endif  // !_MSC_VER

RpbMapRedResp::RpbMapRedResp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbMapRedResp::InitAsDefaultInstance() {
}

RpbMapRedResp::RpbMapRedResp(const RpbMapRedResp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbMapRedResp::SharedCtor() {
  _cached_size_ = 0;
  phase_ = 0u;
  response_ = const_cast< ::std::string*>(&_default_response_);
  done_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbMapRedResp::~RpbMapRedResp() {
  SharedDtor();
}

void RpbMapRedResp::SharedDtor() {
  if (response_ != &_default_response_) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void RpbMapRedResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbMapRedResp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbMapRedResp_descriptor_;
}

const RpbMapRedResp& RpbMapRedResp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbMapRedResp* RpbMapRedResp::default_instance_ = NULL;

RpbMapRedResp* RpbMapRedResp::New() const {
  return new RpbMapRedResp;
}

void RpbMapRedResp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    phase_ = 0u;
    if (_has_bit(1)) {
      if (response_ != &_default_response_) {
        response_->clear();
      }
    }
    done_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbMapRedResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }
      
      // optional bytes response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_done;
        break;
      }
      
      // optional bool done = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbMapRedResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 phase = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase(), output);
  }
  
  // optional bytes response = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->response(), output);
  }
  
  // optional bool done = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->done(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbMapRedResp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 phase = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase(), target);
  }
  
  // optional bytes response = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->response(), target);
  }
  
  // optional bool done = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->done(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbMapRedResp::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 phase = 1;
    if (has_phase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase());
    }
    
    // optional bytes response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->response());
    }
    
    // optional bool done = 3;
    if (has_done()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbMapRedResp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbMapRedResp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbMapRedResp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbMapRedResp::MergeFrom(const RpbMapRedResp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_phase(from.phase());
    }
    if (from._has_bit(1)) {
      set_response(from.response());
    }
    if (from._has_bit(2)) {
      set_done(from.done());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbMapRedResp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbMapRedResp::CopyFrom(const RpbMapRedResp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbMapRedResp::IsInitialized() const {
  
  return true;
}

void RpbMapRedResp::Swap(RpbMapRedResp* other) {
  if (other != this) {
    std::swap(phase_, other->phase_);
    std::swap(response_, other->response_);
    std::swap(done_, other->done_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbMapRedResp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbMapRedResp_descriptor_;
  metadata.reflection = RpbMapRedResp_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbContent::_default_value_;
const ::std::string RpbContent::_default_content_type_;
const ::std::string RpbContent::_default_charset_;
const ::std::string RpbContent::_default_content_encoding_;
const ::std::string RpbContent::_default_vtag_;
#ifndef _MSC_VER
const int RpbContent::kValueFieldNumber;
const int RpbContent::kContentTypeFieldNumber;
const int RpbContent::kCharsetFieldNumber;
const int RpbContent::kContentEncodingFieldNumber;
const int RpbContent::kVtagFieldNumber;
const int RpbContent::kLinksFieldNumber;
const int RpbContent::kLastModFieldNumber;
const int RpbContent::kLastModUsecsFieldNumber;
const int RpbContent::kUsermetaFieldNumber;
#endif  // !_MSC_VER

RpbContent::RpbContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbContent::InitAsDefaultInstance() {
}

RpbContent::RpbContent(const RpbContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbContent::SharedCtor() {
  _cached_size_ = 0;
  value_ = const_cast< ::std::string*>(&_default_value_);
  content_type_ = const_cast< ::std::string*>(&_default_content_type_);
  charset_ = const_cast< ::std::string*>(&_default_charset_);
  content_encoding_ = const_cast< ::std::string*>(&_default_content_encoding_);
  vtag_ = const_cast< ::std::string*>(&_default_vtag_);
  last_mod_ = 0u;
  last_mod_usecs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbContent::~RpbContent() {
  SharedDtor();
}

void RpbContent::SharedDtor() {
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (content_type_ != &_default_content_type_) {
    delete content_type_;
  }
  if (charset_ != &_default_charset_) {
    delete charset_;
  }
  if (content_encoding_ != &_default_content_encoding_) {
    delete content_encoding_;
  }
  if (vtag_ != &_default_vtag_) {
    delete vtag_;
  }
  if (this != default_instance_) {
  }
}

void RpbContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbContent_descriptor_;
}

const RpbContent& RpbContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbContent* RpbContent::default_instance_ = NULL;

RpbContent* RpbContent::New() const {
  return new RpbContent;
}

void RpbContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
    if (_has_bit(1)) {
      if (content_type_ != &_default_content_type_) {
        content_type_->clear();
      }
    }
    if (_has_bit(2)) {
      if (charset_ != &_default_charset_) {
        charset_->clear();
      }
    }
    if (_has_bit(3)) {
      if (content_encoding_ != &_default_content_encoding_) {
        content_encoding_->clear();
      }
    }
    if (_has_bit(4)) {
      if (vtag_ != &_default_vtag_) {
        vtag_->clear();
      }
    }
    last_mod_ = 0u;
    last_mod_usecs_ = 0u;
  }
  links_.Clear();
  usermeta_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content_type;
        break;
      }
      
      // optional bytes content_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charset;
        break;
      }
      
      // optional bytes charset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_charset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content_encoding;
        break;
      }
      
      // optional bytes content_encoding = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content_encoding:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content_encoding()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vtag;
        break;
      }
      
      // optional bytes vtag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vtag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vtag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_links;
        break;
      }
      
      // repeated .RpbLink links = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_links()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_links;
        if (input->ExpectTag(56)) goto parse_last_mod;
        break;
      }
      
      // optional uint32 last_mod = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_mod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_mod_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_mod_usecs;
        break;
      }
      
      // optional uint32 last_mod_usecs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_mod_usecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_mod_usecs_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_usermeta;
        break;
      }
      
      // repeated .RpbPair usermeta = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usermeta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usermeta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_usermeta;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes value = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->value(), output);
  }
  
  // optional bytes content_type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->content_type(), output);
  }
  
  // optional bytes charset = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->charset(), output);
  }
  
  // optional bytes content_encoding = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content_encoding(), output);
  }
  
  // optional bytes vtag = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->vtag(), output);
  }
  
  // repeated .RpbLink links = 6;
  for (int i = 0; i < this->links_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->links(i), output);
  }
  
  // optional uint32 last_mod = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->last_mod(), output);
  }
  
  // optional uint32 last_mod_usecs = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_mod_usecs(), output);
  }
  
  // repeated .RpbPair usermeta = 9;
  for (int i = 0; i < this->usermeta_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->usermeta(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes value = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->value(), target);
  }
  
  // optional bytes content_type = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content_type(), target);
  }
  
  // optional bytes charset = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->charset(), target);
  }
  
  // optional bytes content_encoding = 4;
  if (_has_bit(3)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content_encoding(), target);
  }
  
  // optional bytes vtag = 5;
  if (_has_bit(4)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->vtag(), target);
  }
  
  // repeated .RpbLink links = 6;
  for (int i = 0; i < this->links_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->links(i), target);
  }
  
  // optional uint32 last_mod = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->last_mod(), target);
  }
  
  // optional uint32 last_mod_usecs = 8;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_mod_usecs(), target);
  }
  
  // repeated .RpbPair usermeta = 9;
  for (int i = 0; i < this->usermeta_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->usermeta(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbContent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
    // optional bytes content_type = 2;
    if (has_content_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_type());
    }
    
    // optional bytes charset = 3;
    if (has_charset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->charset());
    }
    
    // optional bytes content_encoding = 4;
    if (has_content_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content_encoding());
    }
    
    // optional bytes vtag = 5;
    if (has_vtag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vtag());
    }
    
    // optional uint32 last_mod = 7;
    if (has_last_mod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_mod());
    }
    
    // optional uint32 last_mod_usecs = 8;
    if (has_last_mod_usecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_mod_usecs());
    }
    
  }
  // repeated .RpbLink links = 6;
  total_size += 1 * this->links_size();
  for (int i = 0; i < this->links_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->links(i));
  }
  
  // repeated .RpbPair usermeta = 9;
  total_size += 1 * this->usermeta_size();
  for (int i = 0; i < this->usermeta_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usermeta(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbContent::MergeFrom(const RpbContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  links_.MergeFrom(from.links_);
  usermeta_.MergeFrom(from.usermeta_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_value(from.value());
    }
    if (from._has_bit(1)) {
      set_content_type(from.content_type());
    }
    if (from._has_bit(2)) {
      set_charset(from.charset());
    }
    if (from._has_bit(3)) {
      set_content_encoding(from.content_encoding());
    }
    if (from._has_bit(4)) {
      set_vtag(from.vtag());
    }
    if (from._has_bit(6)) {
      set_last_mod(from.last_mod());
    }
    if (from._has_bit(7)) {
      set_last_mod_usecs(from.last_mod_usecs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbContent::CopyFrom(const RpbContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < usermeta_size(); i++) {
    if (!this->usermeta(i).IsInitialized()) return false;
  }
  return true;
}

void RpbContent::Swap(RpbContent* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(content_type_, other->content_type_);
    std::swap(charset_, other->charset_);
    std::swap(content_encoding_, other->content_encoding_);
    std::swap(vtag_, other->vtag_);
    links_.Swap(&other->links_);
    std::swap(last_mod_, other->last_mod_);
    std::swap(last_mod_usecs_, other->last_mod_usecs_);
    usermeta_.Swap(&other->usermeta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbContent_descriptor_;
  metadata.reflection = RpbContent_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbPair::_default_key_;
const ::std::string RpbPair::_default_value_;
#ifndef _MSC_VER
const int RpbPair::kKeyFieldNumber;
const int RpbPair::kValueFieldNumber;
#endif  // !_MSC_VER

RpbPair::RpbPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbPair::InitAsDefaultInstance() {
}

RpbPair::RpbPair(const RpbPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbPair::~RpbPair() {
  SharedDtor();
}

void RpbPair::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void RpbPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbPair_descriptor_;
}

const RpbPair& RpbPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbPair* RpbPair::default_instance_ = NULL;

RpbPair* RpbPair::New() const {
  return new RpbPair;
}

void RpbPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->key(), output);
  }
  
  // optional bytes value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes key = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }
  
  // optional bytes value = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbPair::MergeFrom(const RpbPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbPair::CopyFrom(const RpbPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RpbPair::Swap(RpbPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbPair_descriptor_;
  metadata.reflection = RpbPair_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string RpbLink::_default_bucket_;
const ::std::string RpbLink::_default_key_;
const ::std::string RpbLink::_default_tag_;
#ifndef _MSC_VER
const int RpbLink::kBucketFieldNumber;
const int RpbLink::kKeyFieldNumber;
const int RpbLink::kTagFieldNumber;
#endif  // !_MSC_VER

RpbLink::RpbLink()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbLink::InitAsDefaultInstance() {
}

RpbLink::RpbLink(const RpbLink& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbLink::SharedCtor() {
  _cached_size_ = 0;
  bucket_ = const_cast< ::std::string*>(&_default_bucket_);
  key_ = const_cast< ::std::string*>(&_default_key_);
  tag_ = const_cast< ::std::string*>(&_default_tag_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbLink::~RpbLink() {
  SharedDtor();
}

void RpbLink::SharedDtor() {
  if (bucket_ != &_default_bucket_) {
    delete bucket_;
  }
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (tag_ != &_default_tag_) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void RpbLink::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbLink::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbLink_descriptor_;
}

const RpbLink& RpbLink::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbLink* RpbLink::default_instance_ = NULL;

RpbLink* RpbLink::New() const {
  return new RpbLink;
}

void RpbLink::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (bucket_ != &_default_bucket_) {
        bucket_->clear();
      }
    }
    if (_has_bit(1)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(2)) {
      if (tag_ != &_default_tag_) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbLink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes bucket = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bucket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_key;
        break;
      }
      
      // optional bytes key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }
      
      // optional bytes tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbLink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes bucket = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bucket(), output);
  }
  
  // optional bytes key = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->key(), output);
  }
  
  // optional bytes tag = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->tag(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbLink::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes bucket = 1;
  if (_has_bit(0)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bucket(), target);
  }
  
  // optional bytes key = 2;
  if (_has_bit(1)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->key(), target);
  }
  
  // optional bytes tag = 3;
  if (_has_bit(2)) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->tag(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbLink::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes bucket = 1;
    if (has_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bucket());
    }
    
    // optional bytes key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }
    
    // optional bytes tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->tag());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbLink::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbLink* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbLink*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbLink::MergeFrom(const RpbLink& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_bucket(from.bucket());
    }
    if (from._has_bit(1)) {
      set_key(from.key());
    }
    if (from._has_bit(2)) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbLink::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbLink::CopyFrom(const RpbLink& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbLink::IsInitialized() const {
  
  return true;
}

void RpbLink::Swap(RpbLink* other) {
  if (other != this) {
    std::swap(bucket_, other->bucket_);
    std::swap(key_, other->key_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbLink::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbLink_descriptor_;
  metadata.reflection = RpbLink_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RpbBucketProps::kNValFieldNumber;
const int RpbBucketProps::kAllowMultFieldNumber;
#endif  // !_MSC_VER

RpbBucketProps::RpbBucketProps()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RpbBucketProps::InitAsDefaultInstance() {
}

RpbBucketProps::RpbBucketProps(const RpbBucketProps& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RpbBucketProps::SharedCtor() {
  _cached_size_ = 0;
  n_val_ = 0u;
  allow_mult_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RpbBucketProps::~RpbBucketProps() {
  SharedDtor();
}

void RpbBucketProps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RpbBucketProps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RpbBucketProps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RpbBucketProps_descriptor_;
}

const RpbBucketProps& RpbBucketProps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_riakclient_2eproto();  return *default_instance_;
}

RpbBucketProps* RpbBucketProps::default_instance_ = NULL;

RpbBucketProps* RpbBucketProps::New() const {
  return new RpbBucketProps;
}

void RpbBucketProps::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    n_val_ = 0u;
    allow_mult_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RpbBucketProps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 n_val = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &n_val_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_allow_mult;
        break;
      }
      
      // optional bool allow_mult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_mult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_mult_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RpbBucketProps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 n_val = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->n_val(), output);
  }
  
  // optional bool allow_mult = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->allow_mult(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RpbBucketProps::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 n_val = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->n_val(), target);
  }
  
  // optional bool allow_mult = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->allow_mult(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RpbBucketProps::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 n_val = 1;
    if (has_n_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->n_val());
    }
    
    // optional bool allow_mult = 2;
    if (has_allow_mult()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RpbBucketProps::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RpbBucketProps* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RpbBucketProps*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RpbBucketProps::MergeFrom(const RpbBucketProps& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_n_val(from.n_val());
    }
    if (from._has_bit(1)) {
      set_allow_mult(from.allow_mult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RpbBucketProps::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RpbBucketProps::CopyFrom(const RpbBucketProps& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RpbBucketProps::IsInitialized() const {
  
  return true;
}

void RpbBucketProps::Swap(RpbBucketProps* other) {
  if (other != this) {
    std::swap(n_val_, other->n_val_);
    std::swap(allow_mult_, other->allow_mult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RpbBucketProps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RpbBucketProps_descriptor_;
  metadata.reflection = RpbBucketProps_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
